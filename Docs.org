#+title: SEED Website Docs

* Front-end
+ [[https://github.com/NasreddinHodja/seed-website][Github]]

[[https://nuxt.com/][Nuxt]] is a front-end framework built on top of [[https://vuejs.org/][Vue.js]]. It provides a structured approach to building web applications with best practices baked in, including performance optimization, SEO, and modular development.

*Pros*:
+ Flexibility: We are starting with Static Site Generation (SSG), but the framework allows for dynamic features in the future (API integration, authentication, etc.)
+ Mental health: Plenty of quality of life for the development experience

*Cons*:
+ none ðŸ”¥ðŸ”¥ðŸ”¥

** Initialize project
=nuxi init= command will prompt you to select a package manager. For this project, we chose [[https://yarnpkg.com/][Yarn]].

#+begin_src sh :caption "init"
# create project
npx nuxi init seed_website

cd seed_website

# install dependencies
yarn install
#+end_src

*** Yarn commands
Changing the =package.json= scripts to use =nuxi=:
#+begin_src json :caption "package.json"
{
  "scripts": {
    "build": "nuxi build",
    "dev": "nuxi dev",
    "lserve": "npx serve .output/public",
    "generate": "nuxi generate",
    "preview": "nuxi preview",
    "postinstall": "nuxi prepare"
  },
}
#+end_src

** Tailwind
For styling, we chose [[https://tailwindcss.com/][tailwindcss]].

Add tailwindcss mobule:
#+begin_src sh :caption "tailwind dependency"
nuxi module add tailwindcss
#+end_src

** Run project locally
#+begin_src sh :caption "run project"
yarn dev
#+end_src

** Generate the static site
Generate using [[https://nuxt.com/docs/api/commands/generate][Static Site Generation (SSG) do Nuxt]]:
#+begin_src sh :caption "generate project"
yarn generate
#+end_src

Serve the generated site locally using:
#+begin_src sh :caption "serve generated project"
yarn lserve
#+end_src

** Project structure
+ =components/=: reusable UI components
+ =pages/=: website pages
+ =layout/=: layout templates used across multiple pages

* Back-end
** Cloudflare R2 Object Storage
We will be using [[https://www.cloudflare.com/][Cloudflare]] to store public media and documents.

*** Cloudflare Worker
+ [[https://github.com/NasreddinHodja/seed-r2-worker][Github]]

Little friend that will be serving our files through public URL.

We will use: =https://seed-r2-worker.seedworker.workers.dev/<BUCKET_NAME>/<FILE_NAME>=

**** Init
#+begin_src sh :caption "init"
npm create cloudflare@latest -- seed-r2-worker
cd seed-r2-worker
#+end_src

For setup, select the following options:
1. For "What would you like to start with?", choose Hello World example.
2. For "Which template would you like to use?", choose Worker only.
3. For "Which language do you want to use?", choose JavaScript.
4. For "Do you want to use git for version control?", choose Yes.
5. For "Do you want to deploy your application?", choose No (we will be making some changes before deploying).

**** Create bucket
#+begin_src sh :caption "create bucket"
npx wrangler r2 bucket create <YOUR_BUCKET_NAME>
#+end_src

**** Bind bucket to worker
#+begin_src sh :caption "wrangler.jsonc"
{
  "r2_buckets": [
    {
      "binding": "MY_BUCKET",
      "bucket_name": "<YOUR_BUCKET_NAME>"
    }
  ]
}
#+end_src

**** Simple worker
#+begin_src javascript :caption "worker"
export default {
    async fetch(request, env) {
        const url = new URL(request.url);
        const key = url.pathname.slice(1);

        switch (request.method) {
            // case 'PUT':
            //          await env.MY_BUCKET.put(key, request.body);
            //          return new Response(`Put ${key} successfully!`);
            case 'GET':
                const object = await env.MY_BUCKET.get(key);

                if (object === null) {
                    return new Response('Object Not Found', { status: 404 });
                }

                const headers = new Headers();
                object.writeHttpMetadata(headers);
                headers.set('etag', object.httpEtag);

                return new Response(object.body, {
                    headers,
                });
            // case 'DELETE':
            //          await env.MY_BUCKET.delete(key);
            //          return new Response('Deleted!');

            default:
                return new Response('Method Not Allowed', {
                    status: 405,
                    headers: {
                        Allow: 'GET',
                    },
                });
        }
    },
};
#+end_src

We can test locally with:
#+begin_src sh :caption "test locally"
npx wrangler dev
#+end_src

And deploy:
#+begin_src sh :caption "deploy worker"
npx wrangler deploy
#+end_src
